# Written By Ananke: https://github.com/4n4nk3

import json
# pycryptodome
from Crypto.Cipher import AES
from base64 import b64encode, b64decode
from pwn import *

def encode_aes(text_input: str) -> str:
    """Encode a string and output an json in string form.\n"""
    secret = b'4n4nk353hlli5w311d0n3andI1ik3it!'
    cipher = AES.new(secret, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(bytes(text_input, 'utf-8'))
    lista = [ciphertext, tag, cipher.nonce]
    json_k = ['ciphertext', 'tag', 'nonce']
    json_v = [b64encode(x).decode('utf-8') for x in lista]
    print(json.dumps(dict(zip(json_k, json_v))))


def decode_aes(json_input: str) -> str:
    """Decode a string in json form and output a string.\n"""
    try:
        b64 = json.loads(json_input)
        json_k = ['ciphertext', 'tag', 'nonce']
        jv = {k: b64decode(b64[k]) for k in json_k}
        secret = b'4n4nk353hlli5w311d0n3andI1ik3it!'
        cipher = AES.new(secret, AES.MODE_EAX, nonce=jv['nonce'])
        cleared = (cipher.decrypt_and_verify(jv['ciphertext'], jv['tag'])).decode('utf-8')
        log.success(cleared)
    except Exception as exception_decode:
        print(exception_decode)
        print("Incorrect decryption")

if args.ENC:
    encode_aes(args.ENC)

elif args.DEC:
    decode_aes(args.DEC)

else:
    log.warn('Specify ENC or DEC')
    ctx_flag3_exe = [
        '{"ciphertext": "", "tag": "ZXWztbrtxhdxkUww74nMgA==", "nonce": "BvSDP9aq4SUqX5+WxhicqQ=="}']
    
    ctx_flag2 = [
        '{"ciphertext": "0dI=", "tag": "Q+8kF8h8IOIDHeCfXQBMKw==", "nonce": "pVCpyNzAUAGHrJjO3cwO1Q=="}','{"ciphertext": "TlPouw==", "tag": "blMKPA+u6dbU9uIt0Z3YMQ==", "nonce": "Z+zy/cx7dxPsenjnQGwpQQ=="}','{"ciphertext": "Z/e1", "tag": "KJtbQXWyV9JCZ1c8Y2NT6A==", "nonce": "w5Vj/nW4PEHgtkqf+UstYQ=="}',    '{"ciphertext": "uqKU8a3lfM3hIz6kc+v4C6U0U8vsKuWHXgigWg==", "tag": "jKBB742lE1EciuMLxievLQ==", "nonce": "5BY+O1+BJIk6vjiN8K70AQ=="}',
        '{"ciphertext": "FQMHjQ==", "tag": "xW7/a0NfYjyVcz3/ztg10Q==", "nonce": "fT9ZOny7NQBAZuX4fNKtLg=="}','{"ciphertext": "N0aFIuZlisFVb7qpGRP6+SaCmq/4v9hBl8sD8uJFYCMWoJ4s/FtDszOjaAqzL+2PVtWluLjEzDNO3Jmsgqju7ncV00SbYW/Ff8RtP8BP27BCINBBHRQMgn859RzEmEX9THj8Z7Jap85lA3YkYPJ+9HJBZdsRLprhjBR8jCuwoxlMloIUSVPkcs+RuzZt24mD63EJaICqFHXAd5MV3eMDMCCtXCTR37lX4exveB7SqraxACcd8Th3QW58+g9KsB02yUAlfDfAp7TXVofEOYyRzkDd33q2Br/RUSYPvBuSs9S5Q+IM5u2smmYyFJouOVPD1ycPzOHUBOH85itnngQts5BZoZMJWD//Gzls/OAgYx/WMsD4wFdYm4zipcLCuslPnW/oDD7g1HOyV5jzSkNjJzuVSu3be4F+7t4Prn+0cP3uGL08vj2NsaqH99fZJkC4dsokLDrPphykU/7hMsQF4nU8Fvn8OLMfAFz4VaOWglob6PWOoged1/Pb9uezB5Sq2SrV/3c+OpHNXwmnBm8K2/hqSl4feYzb7Xk/9ZZnV41VlqAn24dXGjvTGXGNLJOS30+PA4UIgMcOSU+yYxjikETIR/kfb+zGDy1imheDeKpZz75v5Lo3aO47ZbtJi2s07yIaZhtwl8i1KTLQOf7s/7GGo/VnHSvjj7TZsIUgy/DpRwoULoAtgAcaEO7KVIXgs2eG3sKdeWVf3ctCQJfued4BV5SE39BodLfUgxy+0P2S5l/FxA/Cb83B2j3UPoRBCDea4vhqrgqpbcSmMTbyFBDGiVpP5emGRI5RYKRTBUXcxT6I4lZup3ymt6DSJMg2nmZk4r1N4FJX9LKd8FnxbVxh+oSUJUuwHfudPTPev6MeOPuqyfVBoCI6b9UJK7q8NNU/NUAO+G1o44oSpS6CgNW9bW7f34A1M3LWrLJKNA==", "tag": "HSYzTxIeKevsXK+Gl+RWZA==", "nonce": "zoxRFmtEOV3iCgT8DBE+aA=="}',
        '{"ciphertext": "QLgn", "tag": "zRrjZWcV00bpJ6foLElyMQ==", "nonce": "8JtunFIXhbFKaM1vq30S3A=="}','{"ciphertext": "bMq3s1O/n2ojHiAVP5Dc", "tag": "smWNxjOFWijWdGiAZkL7mg==", "nonce": "42UROw6rQkU223yArwnZNw=="}',
        '{"ciphertext": "spS4", "tag": "Vp63Skl5hO1qCgfQdJRrJw==", "nonce": "YJSyVjmiSLbr00iFa+LSbw=="}',    '{"ciphertext": "dgRFDScGYh7gpvUKJyPleSRLZ6MSfqTu50dI1Q==", "tag": "MGyv2KFZpJHvLBNIm1yIbw==", "nonce": "9Rpq3UOOBdOEwoWGkuu9xA=="}',
        '{"ciphertext": "xStx", "tag": "RhyO5oNOfObK1JVhC3dEoQ==", "nonce": "o5NhiTpvqOnvgZt8hZa92g=="}',
        '{"ciphertext": "zM7DT9ALnzzzulBRKyE+4vRZo/6YkoP8VbwU1Q==", "tag": "ZlXa9fOk1da+7fltzqujuw==", "nonce": "HaFDpvK2r0h3QR+i6FOycg=="}',
        '{"ciphertext": "0I+W", "tag": "NaxEmg3E4AbtmC+yfwU8Aw==", "nonce": "w6/roHIhDnS+r2g5bIAuLA=="}',
        '{"ciphertext": "/EeacRxG1n52ktQLen6kv2oSwH0FJTlsVdkflQ==", "tag": "XpttLXi5GZ6oRsn1ltaDMg==", "nonce": "D3mKJM8KnDL7QY3tFv209Q=="}',
        '{"ciphertext": "zk28", "tag": "7c6L2dPDhNj8/4xo3MR3XA==", "nonce": "LCasVvcdwaRIGP+yjy2jnQ=="}',
        '{"ciphertext": "Q048deRf+J1mlLqCnp93p7Nwd9eAG+BV+TAR5aiJs1y3aR4QxWvHS/pfTYUnYHQd4H/ri0gckxdak3BOY/kWa1D92qZVfIPHtj/3Jshshiz/t6369MFW7tKPOJ9GOG9nmS0u4myzNOlwMqBPQur9yzNfeqi9EWm4792cLrr2hW35fqI/Rl34h6kuefj8gSvWoBoqmDtqRcqQAaXVU+SKMV5gyoVNzgtz+GRJvBv02bGLgqg5taIPyJedSsPdhG62+XHyMCdQQUNw2BeYAYCupW1cuA05epdo2ccK/6YmaUoIPaDW7Uc6meeXmlO8NqDVKuv9NxODRXZJJ1+DhFuT4OX/GG+cFEOZWclNeJ+brXWHdxkNYdt4X68zALWJcFV+/3545PTy6uimF3SBQoJYGZn6ToGHSTyDE2NbTfZHHcsGkiJV7WEBta2if66qjSMFE57HIcqgHJs0zLG2m/khs5wzzOXNxqAGrBQADtQ6+jAF0PTTd+NA3sAPGT40P165U9ps9kWHDiyoCQSnQyN27Fm8pFF7Jo2jnRezLjLJ2pg7uZNBhRE80uif5k3p9zcUW+vQZKHhy9BNyQFUxoJnbtfbLmzZFwfZBIXFiHOLP+wIi8CYVcQlQ5cybMzXNwgt8+SzTLQNZjpF5xvMkxwaFeBWVDsx6Twm0myqlBjpI9wSJAxU8roHQPrRjBfmpQ5YYFtO8+X0YXYxNOqHttMVokN1EyDXqyVVALWBxyiCz4Zdtb4SaHyo0tXJxF020sXruu1h10OfosE0idDfUPgOKzGnsNagbceVN8spOFioxZVdNA1s1ss0r5keSfjbtJfSuozthMb/ZO02Zv50vmzEDR3iCeGn3TNsI4eftaoXUZrqbYbA6l9PIouyZ3cJaPijf63h73xkHF4=", "tag": "6D65EDlI7vG2SOB88PglFQ==", "nonce": "pxQN8+vFJqsm6ONuJB++rg=="}',
        '{"ciphertext": "R3c=", "tag": "2aSU2sOVJT8fCeAbHUxWDA==", "nonce": "aBIdspqXwC38HkwhWDJZpg=="}', 
        '{"ciphertext": "2Xu9NA==", "tag": "xbZ2Y+XktCEfFngWo34ZvQ==", "nonce": "8arI7sL/Ws8PoR6SoIDlsQ=="}'
        '{"ciphertext": "VOIW", "tag": "HrHMHN00gTLe8jKhDp5yog==", "nonce": "N0gf1dUaQUxVgeFiYI9SdQ=="}',
        '{"ciphertext": "cduMr8+31GAfnZ93", "tag": "FNrhMVtKT0xH2+Hz5S9KnA==", "nonce": "egFkHQaoXo874KMP9UTiFw=="}',
        '{"ciphertext": "EKpi", "tag": "39KT08o27WTaf/vKEHM5gg==", "nonce": "qME7vWfXGWU1SXxPVvboOQ=="}',
        '{"ciphertext": "Fp6B4YuraGuOUAFkXbjOz29grqV5V6xA/cf9YlhOcg8oBRnlwo89LL65", "tag": "jwDo0Hmc0qL6jJGEOejW9w==", "nonce": "kNtP6k2/tQ11pLTee7PELA=="}'
    ]
    for i in ctx_flag2:
        decode_aes(i)
